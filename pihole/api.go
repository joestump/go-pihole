// Package pihole provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.9.1 DO NOT EDIT.
package pihole

import (
	"context"
	"encoding/json"
	"fmt"
	"io"
	"io/ioutil"
	"net/http"
	"net/url"
	"strings"

	"github.com/deepmap/oapi-codegen/pkg/runtime"
)

const (
	PiHoleAPITokenScopes = "PiHoleAPIToken.Scopes"
)

// Defines values for StatusStatus.
const (
	StatusStatusDisabled StatusStatus = "disabled"

	StatusStatusEnabled StatusStatus = "enabled"
)

// CustomCNAMERecord defines model for CustomCNAMERecord.
type CustomCNAMERecord struct {
	// DNS name of CNAME record.
	Domain string `json:"domain"`

	// Target domain of CNAME record.
	Target string `json:"target"`
}

// CustomDNSRecord defines model for CustomDNSRecord.
type CustomDNSRecord struct {
	// DNS name of A record.
	Domain string `json:"domain"`

	// IP address of A record.
	Ip string `json:"ip"`
}

// CustomDNSResponse defines model for CustomDNSResponse.
type CustomDNSResponse struct {
	Message *string `json:"message,omitempty"`
	Success *bool   `json:"success,omitempty"`
}

// Data defines model for Data.
type Data struct {
	Data *[]map[string]interface{} `json:"data,omitempty"`
}

// MaxLogAge defines model for MaxLogAge.
type MaxLogAge struct {
	Maxlogage *int `json:"maxlogage,omitempty"`
}

// Status defines model for Status.
type Status struct {
	Status *StatusStatus `json:"status,omitempty"`
}

// StatusStatus defines model for Status.Status.
type StatusStatus string

// TopClients defines model for TopClients.
type TopClients struct {
	TopSources *map[string]interface{} `json:"top_sources,omitempty"`
}

// TopClientsBlocked defines model for TopClientsBlocked.
type TopClientsBlocked struct {
	TopSourcesBlocked *map[string]interface{} `json:"top_sources_blocked,omitempty"`
}

// Versions defines model for Versions.
type Versions struct {
	FTLBranch   *string `json:"FTL_branch,omitempty"`
	FTLCurrent  *string `json:"FTL_current,omitempty"`
	FTLLatest   *string `json:"FTL_latest,omitempty"`
	FTLUpdate   *bool   `json:"FTL_update,omitempty"`
	CoreBranch  *string `json:"core_branch,omitempty"`
	CoreCurrent *string `json:"core_current,omitempty"`
	CoreLatest  *string `json:"core_latest,omitempty"`
	CoreUpdate  *bool   `json:"core_update,omitempty"`
	WebBranch   *string `json:"web_branch,omitempty"`
	WebCurrent  *string `json:"web_current,omitempty"`
	WebLatest   *string `json:"web_latest,omitempty"`
	WebUpdate   *bool   `json:"web_update,omitempty"`
}

// ManageCustomCNAMERecordParamsAction defines parameters for ManageCustomCNAMERecord.
type ManageCustomCNAMERecordParamsAction string

// ManageCustomDNSRecordParamsAction defines parameters for ManageCustomDNSRecord.
type ManageCustomDNSRecordParamsAction string

// ListEntriesParamsType defines parameters for ListEntries.
type ListEntriesParamsType string

// ManageDomainListParamsType defines parameters for ManageDomainList.
type ManageDomainListParamsType string

// ManageDomainListParamsOperation defines parameters for ManageDomainList.
type ManageDomainListParamsOperation string

// RequestEditorFn  is the function signature for the RequestEditor callback function
type RequestEditorFn func(ctx context.Context, req *http.Request) error

// Doer performs HTTP requests.
//
// The standard http.Client implements this interface.
type HttpRequestDoer interface {
	Do(req *http.Request) (*http.Response, error)
}

// Client which conforms to the OpenAPI3 specification for this service.
type Client struct {
	// The endpoint of the server conforming to this interface, with scheme,
	// https://api.deepmap.com for example. This can contain a path relative
	// to the server, such as https://api.deepmap.com/dev-test, and all the
	// paths in the swagger spec will be appended to the server.
	Server string

	// Doer for performing requests, typically a *http.Client with any
	// customized settings, such as certificate chains.
	Client HttpRequestDoer

	// A list of callbacks for modifying requests which are generated before sending over
	// the network.
	RequestEditors []RequestEditorFn
}

// ClientOption allows setting custom parameters during construction
type ClientOption func(*Client) error

// Creates a new Client, with reasonable defaults
func NewClient(server string, opts ...ClientOption) (*Client, error) {
	// create a client with sane default values
	client := Client{
		Server: server,
	}
	// mutate client and add all optional params
	for _, o := range opts {
		if err := o(&client); err != nil {
			return nil, err
		}
	}
	// ensure the server URL always has a trailing slash
	if !strings.HasSuffix(client.Server, "/") {
		client.Server += "/"
	}
	// create httpClient, if not already present
	if client.Client == nil {
		client.Client = &http.Client{}
	}
	return &client, nil
}

// WithHTTPClient allows overriding the default Doer, which is
// automatically created using http.Client. This is useful for tests.
func WithHTTPClient(doer HttpRequestDoer) ClientOption {
	return func(c *Client) error {
		c.Client = doer
		return nil
	}
}

// WithRequestEditorFn allows setting up a callback function, which will be
// called right before sending the request. This can be used to mutate the request.
func WithRequestEditorFn(fn RequestEditorFn) ClientOption {
	return func(c *Client) error {
		c.RequestEditors = append(c.RequestEditors, fn)
		return nil
	}
}

// The interface specification for the client above.
type ClientInterface interface {
	// GetCustomCNAMERecords request
	GetCustomCNAMERecords(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ManageCustomCNAMERecord request with any body
	ManageCustomCNAMERecordWithBody(ctx context.Context, action ManageCustomCNAMERecordParamsAction, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetCustomDNSRecords request
	GetCustomDNSRecords(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ManageCustomDNSRecord request with any body
	ManageCustomDNSRecordWithBody(ctx context.Context, action ManageCustomDNSRecordParamsAction, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DisableServer request
	DisableServer(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// EnableServer request
	EnableServer(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetMaxLogAge request
	GetMaxLogAge(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ListEntries request
	ListEntries(ctx context.Context, pType ListEntriesParamsType, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ManageDomainList request
	ManageDomainList(ctx context.Context, pType ManageDomainListParamsType, operation ManageDomainListParamsOperation, domain string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetOverTimeData10mins request
	GetOverTimeData10mins(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetStatus request
	GetStatus(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetTopClients request
	GetTopClients(ctx context.Context, count int, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetTopClientsBlocked request
	GetTopClientsBlocked(ctx context.Context, count int, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetTopItems request
	GetTopItems(ctx context.Context, pType string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetVersions request
	GetVersions(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)
}

func (c *Client) GetCustomCNAMERecords(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetCustomCNAMERecordsRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ManageCustomCNAMERecordWithBody(ctx context.Context, action ManageCustomCNAMERecordParamsAction, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewManageCustomCNAMERecordRequestWithBody(c.Server, action, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetCustomDNSRecords(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetCustomDNSRecordsRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ManageCustomDNSRecordWithBody(ctx context.Context, action ManageCustomDNSRecordParamsAction, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewManageCustomDNSRecordRequestWithBody(c.Server, action, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DisableServer(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDisableServerRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) EnableServer(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewEnableServerRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetMaxLogAge(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetMaxLogAgeRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ListEntries(ctx context.Context, pType ListEntriesParamsType, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewListEntriesRequest(c.Server, pType)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ManageDomainList(ctx context.Context, pType ManageDomainListParamsType, operation ManageDomainListParamsOperation, domain string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewManageDomainListRequest(c.Server, pType, operation, domain)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetOverTimeData10mins(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetOverTimeData10minsRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetStatus(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetStatusRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetTopClients(ctx context.Context, count int, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetTopClientsRequest(c.Server, count)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetTopClientsBlocked(ctx context.Context, count int, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetTopClientsBlockedRequest(c.Server, count)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetTopItems(ctx context.Context, pType string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetTopItemsRequest(c.Server, pType)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetVersions(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetVersionsRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

// NewGetCustomCNAMERecordsRequest generates requests for GetCustomCNAMERecords
func NewGetCustomCNAMERecordsRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("?customcname&action=get")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewManageCustomCNAMERecordRequestWithBody generates requests for ManageCustomCNAMERecord with any type of body
func NewManageCustomCNAMERecordRequestWithBody(server string, action ManageCustomCNAMERecordParamsAction, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "action", runtime.ParamLocationPath, action)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("?customcname&action=%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetCustomDNSRecordsRequest generates requests for GetCustomDNSRecords
func NewGetCustomDNSRecordsRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("?customdns&action=get")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewManageCustomDNSRecordRequestWithBody generates requests for ManageCustomDNSRecord with any type of body
func NewManageCustomDNSRecordRequestWithBody(server string, action ManageCustomDNSRecordParamsAction, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "action", runtime.ParamLocationPath, action)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("?customdns&action=%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDisableServerRequest generates requests for DisableServer
func NewDisableServerRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("?disable")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewEnableServerRequest generates requests for EnableServer
func NewEnableServerRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("?enable")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetMaxLogAgeRequest generates requests for GetMaxLogAge
func NewGetMaxLogAgeRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("?getMaxlogage")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewListEntriesRequest generates requests for ListEntries
func NewListEntriesRequest(server string, pType ListEntriesParamsType) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "type", runtime.ParamLocationPath, pType)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("?list=%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewManageDomainListRequest generates requests for ManageDomainList
func NewManageDomainListRequest(server string, pType ManageDomainListParamsType, operation ManageDomainListParamsOperation, domain string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "type", runtime.ParamLocationPath, pType)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "operation", runtime.ParamLocationPath, operation)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "domain", runtime.ParamLocationPath, domain)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("?list=%s&%s=%s", pathParam0, pathParam1, pathParam2)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetOverTimeData10minsRequest generates requests for GetOverTimeData10mins
func NewGetOverTimeData10minsRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("?overTimeData10mins")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetStatusRequest generates requests for GetStatus
func NewGetStatusRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("?status")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetTopClientsRequest generates requests for GetTopClients
func NewGetTopClientsRequest(server string, count int) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "count", runtime.ParamLocationPath, count)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("?topClients=%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetTopClientsBlockedRequest generates requests for GetTopClientsBlocked
func NewGetTopClientsBlockedRequest(server string, count int) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "count", runtime.ParamLocationPath, count)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("?topClientsBlocked=%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetTopItemsRequest generates requests for GetTopItems
func NewGetTopItemsRequest(server string, pType string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "type", runtime.ParamLocationPath, pType)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("?topItems=%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetVersionsRequest generates requests for GetVersions
func NewGetVersionsRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("?versions")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

func (c *Client) applyEditors(ctx context.Context, req *http.Request, additionalEditors []RequestEditorFn) error {
	for _, r := range c.RequestEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	for _, r := range additionalEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	return nil
}

// ClientWithResponses builds on ClientInterface to offer response payloads
type ClientWithResponses struct {
	ClientInterface
}

// NewClientWithResponses creates a new ClientWithResponses, which wraps
// Client with return type handling
func NewClientWithResponses(server string, opts ...ClientOption) (*ClientWithResponses, error) {
	client, err := NewClient(server, opts...)
	if err != nil {
		return nil, err
	}
	return &ClientWithResponses{client}, nil
}

// WithBaseURL overrides the baseURL.
func WithBaseURL(baseURL string) ClientOption {
	return func(c *Client) error {
		newBaseURL, err := url.Parse(baseURL)
		if err != nil {
			return err
		}
		c.Server = newBaseURL.String()
		return nil
	}
}

// ClientWithResponsesInterface is the interface specification for the client with responses above.
type ClientWithResponsesInterface interface {
	// GetCustomCNAMERecords request
	GetCustomCNAMERecordsWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetCustomCNAMERecordsResponse, error)

	// ManageCustomCNAMERecord request with any body
	ManageCustomCNAMERecordWithBodyWithResponse(ctx context.Context, action ManageCustomCNAMERecordParamsAction, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ManageCustomCNAMERecordResponse, error)

	// GetCustomDNSRecords request
	GetCustomDNSRecordsWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetCustomDNSRecordsResponse, error)

	// ManageCustomDNSRecord request with any body
	ManageCustomDNSRecordWithBodyWithResponse(ctx context.Context, action ManageCustomDNSRecordParamsAction, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ManageCustomDNSRecordResponse, error)

	// DisableServer request
	DisableServerWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*DisableServerResponse, error)

	// EnableServer request
	EnableServerWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*EnableServerResponse, error)

	// GetMaxLogAge request
	GetMaxLogAgeWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetMaxLogAgeResponse, error)

	// ListEntries request
	ListEntriesWithResponse(ctx context.Context, pType ListEntriesParamsType, reqEditors ...RequestEditorFn) (*ListEntriesResponse, error)

	// ManageDomainList request
	ManageDomainListWithResponse(ctx context.Context, pType ManageDomainListParamsType, operation ManageDomainListParamsOperation, domain string, reqEditors ...RequestEditorFn) (*ManageDomainListResponse, error)

	// GetOverTimeData10mins request
	GetOverTimeData10minsWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetOverTimeData10minsResponse, error)

	// GetStatus request
	GetStatusWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetStatusResponse, error)

	// GetTopClients request
	GetTopClientsWithResponse(ctx context.Context, count int, reqEditors ...RequestEditorFn) (*GetTopClientsResponse, error)

	// GetTopClientsBlocked request
	GetTopClientsBlockedWithResponse(ctx context.Context, count int, reqEditors ...RequestEditorFn) (*GetTopClientsBlockedResponse, error)

	// GetTopItems request
	GetTopItemsWithResponse(ctx context.Context, pType string, reqEditors ...RequestEditorFn) (*GetTopItemsResponse, error)

	// GetVersions request
	GetVersionsWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetVersionsResponse, error)
}

type GetCustomCNAMERecordsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Data
}

// Status returns HTTPResponse.Status
func (r GetCustomCNAMERecordsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetCustomCNAMERecordsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ManageCustomCNAMERecordResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *CustomDNSResponse
}

// Status returns HTTPResponse.Status
func (r ManageCustomCNAMERecordResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ManageCustomCNAMERecordResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetCustomDNSRecordsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Data
}

// Status returns HTTPResponse.Status
func (r GetCustomDNSRecordsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetCustomDNSRecordsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ManageCustomDNSRecordResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *CustomDNSResponse
}

// Status returns HTTPResponse.Status
func (r ManageCustomDNSRecordResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ManageCustomDNSRecordResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DisableServerResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Status
}

// Status returns HTTPResponse.Status
func (r DisableServerResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DisableServerResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type EnableServerResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Status
}

// Status returns HTTPResponse.Status
func (r EnableServerResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r EnableServerResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetMaxLogAgeResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *MaxLogAge
}

// Status returns HTTPResponse.Status
func (r GetMaxLogAgeResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetMaxLogAgeResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ListEntriesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Data
}

// Status returns HTTPResponse.Status
func (r ListEntriesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ListEntriesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ManageDomainListResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Data
}

// Status returns HTTPResponse.Status
func (r ManageDomainListResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ManageDomainListResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetOverTimeData10minsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Data
}

// Status returns HTTPResponse.Status
func (r GetOverTimeData10minsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetOverTimeData10minsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetStatusResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Status
}

// Status returns HTTPResponse.Status
func (r GetStatusResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetStatusResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetTopClientsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *TopClients
}

// Status returns HTTPResponse.Status
func (r GetTopClientsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetTopClientsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetTopClientsBlockedResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *TopClientsBlocked
}

// Status returns HTTPResponse.Status
func (r GetTopClientsBlockedResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetTopClientsBlockedResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetTopItemsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Data
}

// Status returns HTTPResponse.Status
func (r GetTopItemsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetTopItemsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetVersionsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Versions
}

// Status returns HTTPResponse.Status
func (r GetVersionsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetVersionsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

// GetCustomCNAMERecordsWithResponse request returning *GetCustomCNAMERecordsResponse
func (c *ClientWithResponses) GetCustomCNAMERecordsWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetCustomCNAMERecordsResponse, error) {
	rsp, err := c.GetCustomCNAMERecords(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetCustomCNAMERecordsResponse(rsp)
}

// ManageCustomCNAMERecordWithBodyWithResponse request with arbitrary body returning *ManageCustomCNAMERecordResponse
func (c *ClientWithResponses) ManageCustomCNAMERecordWithBodyWithResponse(ctx context.Context, action ManageCustomCNAMERecordParamsAction, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ManageCustomCNAMERecordResponse, error) {
	rsp, err := c.ManageCustomCNAMERecordWithBody(ctx, action, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseManageCustomCNAMERecordResponse(rsp)
}

// GetCustomDNSRecordsWithResponse request returning *GetCustomDNSRecordsResponse
func (c *ClientWithResponses) GetCustomDNSRecordsWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetCustomDNSRecordsResponse, error) {
	rsp, err := c.GetCustomDNSRecords(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetCustomDNSRecordsResponse(rsp)
}

// ManageCustomDNSRecordWithBodyWithResponse request with arbitrary body returning *ManageCustomDNSRecordResponse
func (c *ClientWithResponses) ManageCustomDNSRecordWithBodyWithResponse(ctx context.Context, action ManageCustomDNSRecordParamsAction, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ManageCustomDNSRecordResponse, error) {
	rsp, err := c.ManageCustomDNSRecordWithBody(ctx, action, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseManageCustomDNSRecordResponse(rsp)
}

// DisableServerWithResponse request returning *DisableServerResponse
func (c *ClientWithResponses) DisableServerWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*DisableServerResponse, error) {
	rsp, err := c.DisableServer(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDisableServerResponse(rsp)
}

// EnableServerWithResponse request returning *EnableServerResponse
func (c *ClientWithResponses) EnableServerWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*EnableServerResponse, error) {
	rsp, err := c.EnableServer(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseEnableServerResponse(rsp)
}

// GetMaxLogAgeWithResponse request returning *GetMaxLogAgeResponse
func (c *ClientWithResponses) GetMaxLogAgeWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetMaxLogAgeResponse, error) {
	rsp, err := c.GetMaxLogAge(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetMaxLogAgeResponse(rsp)
}

// ListEntriesWithResponse request returning *ListEntriesResponse
func (c *ClientWithResponses) ListEntriesWithResponse(ctx context.Context, pType ListEntriesParamsType, reqEditors ...RequestEditorFn) (*ListEntriesResponse, error) {
	rsp, err := c.ListEntries(ctx, pType, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseListEntriesResponse(rsp)
}

// ManageDomainListWithResponse request returning *ManageDomainListResponse
func (c *ClientWithResponses) ManageDomainListWithResponse(ctx context.Context, pType ManageDomainListParamsType, operation ManageDomainListParamsOperation, domain string, reqEditors ...RequestEditorFn) (*ManageDomainListResponse, error) {
	rsp, err := c.ManageDomainList(ctx, pType, operation, domain, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseManageDomainListResponse(rsp)
}

// GetOverTimeData10minsWithResponse request returning *GetOverTimeData10minsResponse
func (c *ClientWithResponses) GetOverTimeData10minsWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetOverTimeData10minsResponse, error) {
	rsp, err := c.GetOverTimeData10mins(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetOverTimeData10minsResponse(rsp)
}

// GetStatusWithResponse request returning *GetStatusResponse
func (c *ClientWithResponses) GetStatusWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetStatusResponse, error) {
	rsp, err := c.GetStatus(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetStatusResponse(rsp)
}

// GetTopClientsWithResponse request returning *GetTopClientsResponse
func (c *ClientWithResponses) GetTopClientsWithResponse(ctx context.Context, count int, reqEditors ...RequestEditorFn) (*GetTopClientsResponse, error) {
	rsp, err := c.GetTopClients(ctx, count, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetTopClientsResponse(rsp)
}

// GetTopClientsBlockedWithResponse request returning *GetTopClientsBlockedResponse
func (c *ClientWithResponses) GetTopClientsBlockedWithResponse(ctx context.Context, count int, reqEditors ...RequestEditorFn) (*GetTopClientsBlockedResponse, error) {
	rsp, err := c.GetTopClientsBlocked(ctx, count, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetTopClientsBlockedResponse(rsp)
}

// GetTopItemsWithResponse request returning *GetTopItemsResponse
func (c *ClientWithResponses) GetTopItemsWithResponse(ctx context.Context, pType string, reqEditors ...RequestEditorFn) (*GetTopItemsResponse, error) {
	rsp, err := c.GetTopItems(ctx, pType, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetTopItemsResponse(rsp)
}

// GetVersionsWithResponse request returning *GetVersionsResponse
func (c *ClientWithResponses) GetVersionsWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetVersionsResponse, error) {
	rsp, err := c.GetVersions(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetVersionsResponse(rsp)
}

// ParseGetCustomCNAMERecordsResponse parses an HTTP response from a GetCustomCNAMERecordsWithResponse call
func ParseGetCustomCNAMERecordsResponse(rsp *http.Response) (*GetCustomCNAMERecordsResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetCustomCNAMERecordsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Data
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseManageCustomCNAMERecordResponse parses an HTTP response from a ManageCustomCNAMERecordWithResponse call
func ParseManageCustomCNAMERecordResponse(rsp *http.Response) (*ManageCustomCNAMERecordResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ManageCustomCNAMERecordResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest CustomDNSResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetCustomDNSRecordsResponse parses an HTTP response from a GetCustomDNSRecordsWithResponse call
func ParseGetCustomDNSRecordsResponse(rsp *http.Response) (*GetCustomDNSRecordsResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetCustomDNSRecordsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Data
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseManageCustomDNSRecordResponse parses an HTTP response from a ManageCustomDNSRecordWithResponse call
func ParseManageCustomDNSRecordResponse(rsp *http.Response) (*ManageCustomDNSRecordResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ManageCustomDNSRecordResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest CustomDNSResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseDisableServerResponse parses an HTTP response from a DisableServerWithResponse call
func ParseDisableServerResponse(rsp *http.Response) (*DisableServerResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DisableServerResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Status
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseEnableServerResponse parses an HTTP response from a EnableServerWithResponse call
func ParseEnableServerResponse(rsp *http.Response) (*EnableServerResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &EnableServerResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Status
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetMaxLogAgeResponse parses an HTTP response from a GetMaxLogAgeWithResponse call
func ParseGetMaxLogAgeResponse(rsp *http.Response) (*GetMaxLogAgeResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetMaxLogAgeResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest MaxLogAge
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseListEntriesResponse parses an HTTP response from a ListEntriesWithResponse call
func ParseListEntriesResponse(rsp *http.Response) (*ListEntriesResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ListEntriesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Data
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseManageDomainListResponse parses an HTTP response from a ManageDomainListWithResponse call
func ParseManageDomainListResponse(rsp *http.Response) (*ManageDomainListResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ManageDomainListResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Data
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetOverTimeData10minsResponse parses an HTTP response from a GetOverTimeData10minsWithResponse call
func ParseGetOverTimeData10minsResponse(rsp *http.Response) (*GetOverTimeData10minsResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetOverTimeData10minsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Data
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetStatusResponse parses an HTTP response from a GetStatusWithResponse call
func ParseGetStatusResponse(rsp *http.Response) (*GetStatusResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetStatusResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Status
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetTopClientsResponse parses an HTTP response from a GetTopClientsWithResponse call
func ParseGetTopClientsResponse(rsp *http.Response) (*GetTopClientsResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetTopClientsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest TopClients
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetTopClientsBlockedResponse parses an HTTP response from a GetTopClientsBlockedWithResponse call
func ParseGetTopClientsBlockedResponse(rsp *http.Response) (*GetTopClientsBlockedResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetTopClientsBlockedResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest TopClientsBlocked
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetTopItemsResponse parses an HTTP response from a GetTopItemsWithResponse call
func ParseGetTopItemsResponse(rsp *http.Response) (*GetTopItemsResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetTopItemsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Data
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetVersionsResponse parses an HTTP response from a GetVersionsWithResponse call
func ParseGetVersionsResponse(rsp *http.Response) (*GetVersionsResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetVersionsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Versions
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

